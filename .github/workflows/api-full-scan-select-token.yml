name: "API Security Scan with Selectable Token"

on:
  workflow_dispatch:
    inputs:
      api:
        description: 'Select the API to be scanned'
        required: true
        type: choice
        default: 'easey-emissions-api'
        options:
          - 'easey-auth-api'
          - 'easey-camd-services'
          - 'easey-monitor-plan-api'
          - 'easey-mdm-api'
          - 'easey-emissions-api'
          - 'easey-facilities-api'
          - 'easey-account-api'
          - 'easey-qa-certification-api'
          - 'easey-streaming-services'
      environment:
        description: 'Select the Environment'
        required: true
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'test'
          - 'staging'
          - 'beta'
          - 'perf'
      zapscanpolicy:
        description: 'The ZAP scan policy to use'
        required: true
        type: choice
        options:
          - 'Default Policy'
          - 'St-Ins-Th-Low'
          - 'St-Ins-Th-Med'
          - 'St-Ins-Th-High'
          - 'St-High-Th-Low'
          - 'St-High-Th-Med'
          - 'St-High-Th-High'
          - 'St-Medium-Th-Low'
          - 'St-Medium-Th-Med'
          - 'St-Medium-Th-High'
          - 'St-Low-Th-Low'
          - 'St-Low-Th-Med'
          - 'St-Low-Th-High'
      token_type:
        description: 'Select the token type for the scan (AUTH_TOKEN or CLIENT_TOKEN)'
        required: true
        type: choice
        options:
          - 'AUTH_TOKEN'
          - 'CLIENT_TOKEN'

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Construct OpenAPI URLs
      - name: Construct OpenAPI URLs
        id: construct_urls
        run: |
          declare -A API_MAP=(
            ["easey-auth-api"]="auth-mgmt"
            ["easey-camd-services"]="camd-services"
            ["easey-monitor-plan-api"]="monitor-plan-mgmt"
            ["easey-mdm-api"]="master-data-mgmt"
            ["easey-emissions-api"]="emissions-mgmt"
            ["easey-facilities-api"]="facilities-mgmt"
            ["easey-account-api"]="account-mgmt"
            ["easey-qa-certification-api"]="qa-certification-mgmt"
            ["easey-streaming-services"]="streaming-services"
          )

          BACKEND_API=${API_MAP[${{ github.event.inputs.api }}]}
          if [ -z "$BACKEND_API" ]; then
            echo "Error: Backend API mapping not found for selected API: ${{ github.event.inputs.api }}"
            exit 1
          fi

          OPENAPI_URL="https://api.epa.gov/easey/${{ github.event.inputs.environment }}/$BACKEND_API/swagger-json"
          TARGET_URL="https://api.epa.gov/easey/${{ github.event.inputs.environment }}/"
          echo "BACKEND_API=$BACKEND_API" >> $GITHUB_ENV
          echo "OPENAPI_URL=$OPENAPI_URL" >> $GITHUB_ENV
          echo "TARGET_URL=$TARGET_URL" >> $GITHUB_ENV

      # 3. Echo Input Parameters
      - name: Echo Input Parameters
        run: |
          echo "Selected API: ${{ github.event.inputs.api }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Backend API: ${{ env.BACKEND_API }}"
          echo "OpenAPI URL: ${{ env.OPENAPI_URL }}"
          echo "Target URL: ${{ env.TARGET_URL }}"
          echo "Scan Policy: ${{ github.event.inputs.zapscanpolicy }}"
          echo "Token Type: ${{ github.event.inputs.token_type }}"

      # 4. Replace '<<policy>>' in the api_scan.py File
      - name: Replace '<<policy>>' in the api_scan.py file
        run: sed -i "s/<<policy>>/${{ github.event.inputs.zapscanpolicy }}/g" scan-hooks/api_scan.py

      # 5. Install jq
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 6. Obtain Authentication Token
      - name: Obtain Authentication Token
        id: get_auth_token
        env:
          X_API_KEY: ${{ secrets.OWASP_ZAP_SCAN_API_KEY }}
          SCAN_USER_ID: ${{ secrets.SCAN_USER_ID }}
        run: |
          AUTH_RESPONSE=$(curl -s -X POST \
            "${{ env.TARGET_URL }}auth-mgmt/sign-in" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $X_API_KEY" \
            -d "{\"sessionId\": \"${SCAN_USER_ID:-scanUser1}\"}")

          AUTH_TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.token')
          echo "AUTH_TOKEN=$AUTH_TOKEN" >> $GITHUB_ENV

      # 7. Obtain Client Token
      - name: Obtain Client Token
        id: get_client_token
        env:
          X_API_KEY: ${{ secrets.OWASP_ZAP_SCAN_API_KEY }}
          SCAN_CLIENT_ID: ${{ secrets.SCAN_CLIENT_ID }}
          SCAN_CLIENT_SECRET: ${{ secrets.SCAN_CLIENT_SECRET }}
        run: |
          CLIENT_RESPONSE=$(curl -s -X POST \
            "${{ env.TARGET_URL }}auth-mgmt/tokens/client" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $X_API_KEY" \
            -d "{\"clientId\": \"${SCAN_CLIENT_ID}\", \"clientSecret\": \"${SCAN_CLIENT_SECRET}\"}")

          CLIENT_TOKEN=$(echo "$CLIENT_RESPONSE" | jq -r '.token')
          echo "CLIENT_TOKEN=$CLIENT_TOKEN" >> $GITHUB_ENV

      # 8. Run ZAP Scan
      - name: Run ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        env:
          SELECTED_TOKEN: ${{ github.event.inputs.token_type == 'AUTH_TOKEN' && env.AUTH_TOKEN || env.CLIENT_TOKEN }}
          X_API_KEY: ${{ secrets.OWASP_ZAP_SCAN_API_KEY }}
          SCAN_CLIENT_ID: ${{ secrets.SCAN_CLIENT_ID }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ env.TARGET_URL }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:latest'
          allow_issue_writing: 'false'
          rules_file_name: 'rules-api.tsv'
          cmd_options: >
            -a -d
            --hook=scan-hooks/api_scan.py
            -z "
            -addoninstall openapi
            -openapiurl ${{ env.OPENAPI_URL }}
            -openapitargeturl ${{ env.TARGET_URL }}
            -config replacer.full_list\(0\).description=x-api-key
            -config replacer.full_list\(0\).enabled=true
            -config replacer.full_list\(0\).matchtype=REQ_HEADER
            -config replacer.full_list\(0\).matchstr=x-api-key
            -config replacer.full_list\(0\).regex=false
            -config replacer.full_list\(0\).replacement=${{ secrets.OWASP_ZAP_SCAN_API_KEY }}
            -config replacer.full_list\(1\).description=Authorization
            -config replacer.full_list\(1\).enabled=true
            -config replacer.full_list\(1\).matchtype=REQ_HEADER
            -config replacer.full_list\(1\).matchstr=Authorization
            -config replacer.full_list\(1\).regex=false
            -config replacer.full_list\(1\).replacement=Bearer $SELECTED_TOKEN
            -config replacer.full_list\(2\).description=x-client-id
            -config replacer.full_list\(2\).enabled=true
            -config replacer.full_list\(2\).matchtype=REQ_HEADER
            -config replacer.full_list\(2\).matchstr=x-client-id
            -config replacer.full_list\(2\).regex=false
            -config replacer.full_list\(2\).replacement=${{ secrets.SCAN_CLIENT_ID }}
            "
